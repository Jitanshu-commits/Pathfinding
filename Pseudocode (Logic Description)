# Constants
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
GRAY = (128, 128, 128)

GRID_SIZE = 20
CELL_SIZE = 30
SCREEN_SIZE = (GRID_SIZE * CELL_SIZE, GRID_SIZE * CELL_SIZE)

# Initialize Pygame window
Create Pygame window with size SCREEN_SIZE
Set window caption to "Pathfinding Visualization"

# Function to draw the grid
Function draw_grid():
    For x in range(0, SCREEN_SIZE[0], CELL_SIZE):
        Draw a line on the window with color WHITE from (x, 0) to (x, SCREEN_SIZE[1])
    For y in range(0, SCREEN_SIZE[1], CELL_SIZE):
        Draw a line on the window with color WHITE from (0, y) to (SCREEN_SIZE[0], y)

# Function to draw a colored cell at a specific position
Function draw_cell(color, position):
    Draw a rectangle on the window with specified color at position[0] * CELL_SIZE, position[1] * CELL_SIZE

# Function to visualize the path with a delay
Function visualize_path(path, color):
    For each cell in path:
        Draw the cell with the specified color on the window
        Update the window display
        Wait for 50 milliseconds

# Reset the screen, draw the grid, and update the display
Function reset():
    Fill the window with color BLACK
    Call draw_grid()
    Update the window display

# Dijkstra's algorithm
Function dijkstra(start, end, obstacles):
    Create an empty priority queue heap with initial element (0, start, [])
    Create an empty set visited

    While heap is not empty:
        Pop the element with the smallest cost, current position, and path from heap

        If current position is in visited:
            Continue to the next iteration

        Add current position to visited

        If current position is not the start or end, and not an obstacle:
            Draw the cell with color GREEN on the window

        If current position is the end:
            Call visualize_path with the current path and color YELLOW
            Return from the function

        For each neighbor in neighbors(current position):
            If neighbor is not in visited and not an obstacle:
                Push (cost + 1, neighbor, path + [current]) onto heap

        Update the window display

# A* algorithm
Function astar(start, end, obstacles):
    Create an empty priority queue heap with initial element (0, start, [])
    Create an empty set visited

    While heap is not empty:
        Pop the element with the smallest cost, current position, and path from heap

        If current position is in visited:
            Continue to the next iteration

        Add current position to visited

        If current position is not the start or end, and not an obstacle:
            Draw the cell with color BLUE on the window

        If current position is the end:
            Call visualize_path with the current path and color YELLOW
            Return from the function

        For each neighbor in neighbors(current position):
            If neighbor is not in visited and not an obstacle:
                Push (cost + 1 + heuristic(neighbor, end), neighbor, path + [current]) onto heap

        Update the window display

# DFS algorithm
Function dfs(start, end, obstacles):
    Create an empty stack with initial element (start, [])
    Create an empty set visited

    While stack is not empty:
        Pop the element with current position and path from stack

        If current position is in visited:
            Continue to the next iteration

        Add current position to visited

        If current position is not the start or end, and not an obstacle:
            Draw the cell with color BLUE on the window

        If current position is the end:
            Call visualize_path with the current path and color YELLOW
            Return from the function

        Shuffle the list of neighbors of the current position

        For each neighbor in the shuffled list:
            If neighbor is not in visited and not an obstacle:
                Push (neighbor, path + [current]) onto stack

        Update the window display

# BFS algorithm
Function bfs(start, end, obstacles):
    Create an empty queue with initial element (start, [])
    Create an empty set visited

    While queue is not empty:
        Dequeue the element with current position and path from queue

        If current position is in visited:
            Continue to the next iteration

        Add current position to visited

        If current position is not the start or end, and not an obstacle:
            Draw the cell with color BLUE on the window

        If current position is the end:
            Call visualize_path with the current path and color YELLOW
            Return from the function

        For each neighbor in neighbors(current position):
            If neighbor is not in visited and not an obstacle:
                Enqueue (neighbor, path + [current]) onto queue

        Update the window display
 
# Heuristic function for A*
Function heuristic(point, goal):
    Return the sum of absolute differences between point[0] and goal[0], and point[1] and goal[1]

# Function to get valid neighbors for a cell
Function neighbors(cell):
    Extract x and y from cell

    Initialize an empty list valid_neighbors

    If x > 0:
        Append (x - 1, y) to valid_neighbors
    If x < GRID_SIZE - 1:
        Append (x + 1, y) to valid_neighbors
    If y > 0:
        Append (x, y - 1) to valid_neighbors
    If y < GRID_SIZE - 1:
        Append (x, y + 1) to valid_neighbors

    Return valid_neighbors

# Main function
def main():
    reset()

    running = True
    start_set = False
    end_set = False
    start = START
    end = END
    obstacles = set()
    drawing_obstacle = False

    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    if start_set and end_set:
                        # Run Dijkstra's, A*, DFS, and BFS simultaneously
                        dijkstra_path = []
                        astar_path = []
                        dfs_path = []
                        bfs_path = []

                        dijkstra_start_time = pygame.time.get_ticks()
                        dijkstra(start, end, obstacles)
                        dijkstra_end_time = pygame.time.get_ticks()
                        print(f"Dijkstra's Algorithm Time: {dijkstra_end_time - dijkstra_start_time} ms")

                        astar_start_time = pygame.time.get_ticks()
                        astar(start, end, obstacles)
                        astar_end_time = pygame.time.get_ticks()
                        print(f"A* Algorithm Time: {astar_end_time - astar_start_time} ms")

                        dfs_start_time = pygame.time.get_ticks()
                        dfs(start, end, obstacles)
                        dfs_end_time = pygame.time.get_ticks()
                        print(f"DFS Algorithm Time: {dfs_end_time - dfs_start_time} ms")

                        bfs_start_time = pygame.time.get_ticks()
                        bfs(start, end, obstacles)
                        bfs_end_time = pygame.time.get_ticks()
                        print(f"BFS Algorithm Time: {bfs_end_time - bfs_start_time} ms")

                elif event.key == pygame.K_c:
                    start_set = False
                    end_set = False
                    start = START
                    end = END
                    obstacles = set()
                    reset()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                pos = pygame.mouse.get_pos()
                cell_pos = (pos[0] // CELL_SIZE, pos[1] // CELL_SIZE)
                if not start_set:
                    start = cell_pos
                    draw_cell(RED, start)
                    start_set = True
                elif not end_set and cell_pos != start:
                    end = cell_pos
                    draw_cell(RED, end)
                    end_set = True
                else:
                    # Mark the cell as an obstacle
                    obstacles.add(cell_pos)
                    draw_cell(GRAY, cell_pos)
                    drawing_obstacle = True
            elif event.type == pygame.MOUSEMOTION and drawing_obstacle:
                # If the mouse is moved while the obstacle button is held, add obstacles continuously
                pos = pygame.mouse.get_pos()
                cell_pos = (pos[0] // CELL_SIZE, pos[1] // CELL_SIZE)
                obstacles.add(cell_pos)
                draw_cell(GRAY, cell_pos)
            elif event.type == pygame.MOUSEBUTTONUP:
                drawing_obstacle = False

        pygame.display.flip()

    pygame.quit()

# Entry point
if __name__ == "__main__":
    main()

If you want more detailed pseudocode for specific functions or sections, feel free to ask!
PS: I plan on adding new algorithms and some new functions(maze generation, grid resizing etc) that may change or make my previous codes/descs obsolete.
