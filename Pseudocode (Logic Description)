# Constants
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
GRAY = (128, 128, 128)

GRID_SIZE = 20
CELL_SIZE = 30
SCREEN_SIZE = (GRID_SIZE * CELL_SIZE, GRID_SIZE * CELL_SIZE)

# Initialize Pygame window
Initialize Pygame
Set screen = Pygame.display.set_mode(SCREEN_SIZE)
Set caption = "Dijkstra and A* Pathfinding Visualization"
Pygame.display.set_caption(caption)

# Function to draw the grid
Function draw_grid():
    For x in range(0, SCREEN_SIZE[0], CELL_SIZE):
        Draw line on screen from (x, 0) to (x, SCREEN_SIZE[1]) with color WHITE
    For y in range(0, SCREEN_SIZE[1], CELL_SIZE):
        Draw line on screen from (0, y) to (SCREEN_SIZE[0], y) with color WHITE

# Function to draw a colored cell at a specific position
Function draw_cell(color, position):
    Draw rectangle on screen at (position[0] * CELL_SIZE, position[1] * CELL_SIZE) with size CELL_SIZE, CELL_SIZE, and color

# Function to visualize the path with a delay
Function visualize_path(path, color):
    For each cell in path:
        Draw cell with specified color
        Update display
        Wait for 50 milliseconds

# Reset the screen, draw the grid, and update the display
Function reset():
    Fill screen with color BLACK
    Call draw_grid()
    Update display

# Dijkstra's algorithm
Function dijkstra(start, end, obstacles):
    Initialize heap with [(0, start, [])]
    Initialize visited set
    While heap is not empty:
        Dequeue (cost, current, path) from heap
        If current is in visited, continue to the next iteration
        Add current to visited set
        If current is not start, end, or an obstacle, draw cell with color GREEN
        If current is end, visualize path and return
        For each neighbor in neighbors(current):
            If neighbor is not visited and not an obstacle:
                Enqueue (cost + 1, neighbor, path + [current]) to heap
        Update display

# A* algorithm
Function astar(start, end, obstacles):
    Initialize heap with [(0, start, [])]
    Initialize visited set
    While heap is not empty:
        Dequeue (cost, current, path) from heap
        If current is in visited, continue to the next iteration
        Add current to visited set
        If current is not start, end, or an obstacle, draw cell with color BLUE
        If current is end, visualize path and return
        For each neighbor in neighbors(current):
            If neighbor is not visited and not an obstacle:
                Enqueue (cost + 1 + heuristic(neighbor, end), neighbor, path + [current]) to heap
        Update display

# Heuristic function for A*
Function heuristic(point, goal):
    Return Manhattan distance between point and goal

# Function to get valid neighbors for a cell
Function neighbors(cell):
    Extract x, y from cell
    Initialize valid_neighbors as an empty list
    If x > 0, append (x - 1, y) to valid_neighbors
    If x < GRID_SIZE - 1, append (x + 1, y) to valid_neighbors
    If y > 0, append (x, y - 1) to valid_neighbors
    If y < GRID_SIZE - 1, append (x, y + 1) to valid_neighbors
    Return valid_neighbors

# Main function
Function main():
    Call reset()
    Set running to True
    Set start_set and end_set to False
    Set start to START, end to END
    Initialize obstacles set
    Set drawing_obstacle to False
    While running:
        For each event in Pygame events:
            If event is QUIT:
                Set running to False
            Else if event is KEYDOWN:
                If key is SPACE:
                    If start_set and end_set:
                        # Run Dijkstra's and A* simultaneously
                        Initialize dijkstra_path and astar_path as empty lists
                        Get start time for Dijkstra's
                        Call dijkstra(start, end, obstacles)
                        Get end time for Dijkstra's
                        Print Dijkstra's Algorithm Time
                        Get start time for A*
                        Call astar(start, end, obstacles)
                        Get end time for A*
                        Print A* Algorithm Time
                Else if key is c:
                    Reset grid and flags
            Else if event is MOUSEBUTTONDOWN:
                Get mouse position
                Convert position to cell position
                If not start_set:
                    Set start to cell position
                    Draw RED cell at start position
                    Set start_set to True
                Else if not end_set and cell position is not equal to start:
                    Set end to cell position
                    Draw RED cell at end position
                    Set end_set to True
                Else:
                    # Mark the cell as an obstacle
                    Add cell position to obstacles set
                    Draw GRAY cell at obstacle position
                    Set drawing_obstacle to True
            Else if event is MOUSEMOTION and drawing_obstacle is True:
                # If the mouse is moved while the obstacle button is held, add obstacles continuously
                Get mouse position
                Convert position to cell position
                Add cell position to obstacles set
                Draw GRAY cell at obstacle position
            Else if event is MOUSEBUTTONUP:
                Set drawing_obstacle to False
        Update display

    Pygame.quit()

If you want more detailed pseudocode for specific functions or sections, feel free to ask!
